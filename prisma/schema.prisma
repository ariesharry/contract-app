generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  role           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts            Account[]
  contract            Contract[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contract {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  investorId         String?   
  managerId          String?   
  name               String?
  description        String?
  startDate          DateTime
  endDate            DateTime
  investmentAmount   Float
  profitSharingRatio Float // Percentage (e.g., 70.0 for 70%)
  status             Status   @default(CREATED)
  contractFileUrl    String? // URL of the uploaded PDF file
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  profitRecords ProfitRecord[]
}

model ProfitRecord {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  contractId    String   @db.ObjectId
  profitAmount  Float
  investorShare Float
  managerShare  Float
  recordedAt    DateTime @default(now())

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

enum Status {
  CREATED
  ACTIVE
  COMPLETED
  DEFAULT
}
